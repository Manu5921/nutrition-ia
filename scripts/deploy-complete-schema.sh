#!/bin/bash

# =====================================================
# D√âPLOIEMENT AUTOMATIS√â DU SCH√âMA POSTGRESQL COMPLET
# =====================================================
# Coach Nutritionnel IA - Agent Database/Schema
# Version: 1.0
# Date: 2025-06-23

set -e # Arr√™ter en cas d'erreur

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
MIGRATIONS_DIR="$PROJECT_DIR/supabase/migrations"
SCRIPTS_DIR="$PROJECT_DIR/scripts"

echo -e "${BLUE}üöÄ D√âPLOIEMENT DU SCH√âMA POSTGRESQL COMPLET${NC}"
echo -e "${BLUE}===============================================${NC}"
echo ""

# V√©rifier que Supabase CLI est install√©
if ! command -v supabase &> /dev/null; then
    echo -e "${RED}‚ùå Erreur: Supabase CLI n'est pas install√©${NC}"
    echo "Installation: npm install -g supabase"
    exit 1
fi

# V√©rifier la configuration Supabase
if [ ! -f "$PROJECT_DIR/supabase/config.toml" ]; then
    echo -e "${RED}‚ùå Erreur: Configuration Supabase manquante${NC}"
    echo "Ex√©cutez 'supabase init' dans le r√©pertoire du projet"
    exit 1
fi

echo -e "${YELLOW}üìã Configuration du projet:${NC}"
echo "   R√©pertoire: $PROJECT_DIR"
echo "   Migrations: $MIGRATIONS_DIR"
echo "   Scripts: $SCRIPTS_DIR"
echo ""

# V√©rifier que les migrations existent
MIGRATION_FILES=(
    "001_initial_schema.sql"
    "002_foods_nutrition_database.sql"
    "003_advanced_functions.sql"
    "004_rls_policies_complete.sql"
    "005_triggers_and_automation.sql"
    "006_views_and_optimization.sql"
    "007_sample_data.sql"
    "008_missing_system_tables.sql"
)

echo -e "${YELLOW}üîç V√©rification des fichiers de migration...${NC}"
for migration in "${MIGRATION_FILES[@]}"; do
    if [ -f "$MIGRATIONS_DIR/$migration" ]; then
        echo -e "   ‚úÖ $migration"
    else
        echo -e "   ‚ùå $migration (manquant)"
        exit 1
    fi
done
echo ""

# Fonction pour demander confirmation
confirm() {
    read -p "$(echo -e ${YELLOW}$1${NC}) [y/N] " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        return 0
    else
        return 1
    fi
}

# V√©rifier le statut de Supabase
echo -e "${YELLOW}üîå V√©rification de la connexion Supabase...${NC}"
if supabase status &> /dev/null; then
    echo -e "   ‚úÖ Connexion √©tablie"
else
    echo -e "   ‚ö†Ô∏è Supabase n'est pas d√©marr√©"
    if confirm "D√©marrer Supabase localement ?"; then
        echo -e "${BLUE}üöÄ D√©marrage de Supabase...${NC}"
        supabase start
    else
        echo -e "${RED}‚ùå Annulation du d√©ploiement${NC}"
        exit 1
    fi
fi
echo ""

# Option: Reset de la base de donn√©es
if confirm "R√©initialiser compl√®tement la base de donn√©es ?"; then
    echo -e "${YELLOW}üîÑ R√©initialisation de la base de donn√©es...${NC}"
    supabase db reset
    echo -e "   ‚úÖ Base de donn√©es r√©initialis√©e"
    echo ""
fi

# D√©ploiement des migrations
echo -e "${BLUE}üì¶ D√©ploiement des migrations...${NC}"
echo ""

for i in "${!MIGRATION_FILES[@]}"; do
    migration="${MIGRATION_FILES[$i]}"
    number=$((i + 1))
    
    echo -e "${YELLOW}[$number/8] D√©ploiement de $migration...${NC}"
    
    if supabase migration up --include-all 2>/dev/null; then
        echo -e "   ‚úÖ Migration appliqu√©e avec succ√®s"
    else
        echo -e "   ${RED}‚ùå Erreur lors de l'application de la migration${NC}"
        echo -e "   ${YELLOW}Essayez d'appliquer manuellement:${NC}"
        echo -e "   supabase db push"
        exit 1
    fi
    
    sleep 1
done

echo ""
echo -e "${GREEN}‚úÖ Toutes les migrations ont √©t√© appliqu√©es avec succ√®s !${NC}"
echo ""

# Validation du sch√©ma
echo -e "${BLUE}üîç Validation du sch√©ma d√©ploy√©...${NC}"
if [ -f "$SCRIPTS_DIR/validate-schema.sql" ]; then
    if supabase db push && psql "$(supabase status -o env | grep DATABASE_URL | cut -d= -f2-)" -f "$SCRIPTS_DIR/validate-schema.sql" &> /dev/null; then
        echo -e "   ‚úÖ Validation r√©ussie"
    else
        echo -e "   ‚ö†Ô∏è Probl√®me d√©tect√© lors de la validation"
        echo -e "   ${YELLOW}Ex√©cutez manuellement: psql ... -f scripts/validate-schema.sql${NC}"
    fi
else
    echo -e "   ‚ö†Ô∏è Script de validation manquant"
fi
echo ""

# G√©n√©ration des types TypeScript
echo -e "${BLUE}üìù G√©n√©ration des types TypeScript...${NC}"
if supabase gen types typescript --local > "$PROJECT_DIR/lib/supabase/types.ts"; then
    echo -e "   ‚úÖ Types g√©n√©r√©s dans lib/supabase/types.ts"
else
    echo -e "   ${RED}‚ùå Erreur lors de la g√©n√©ration des types${NC}"
fi
echo ""

# Affichage des informations de connexion
echo -e "${GREEN}üéâ D√âPLOIEMENT TERMIN√â AVEC SUCC√àS !${NC}"
echo -e "${GREEN}======================================${NC}"
echo ""
echo -e "${YELLOW}üìä Informations de connexion:${NC}"
supabase status | grep -E "(API URL|anon key|service_role key|DB URL)"
echo ""

echo -e "${YELLOW}üîß Prochaines √©tapes recommand√©es:${NC}"
echo "   1. V√©rifiez le dashboard Supabase: http://localhost:54323"
echo "   2. Testez l'API REST: http://localhost:54321/rest/v1/"
echo "   3. Configurez les variables d'environnement dans .env.local"
echo "   4. D√©marrez l'application Next.js: npm run dev"
echo ""

echo -e "${YELLOW}üìö Documentation:${NC}"
echo "   - Architecture: DATABASE_ARCHITECTURE.md"
echo "   - Rapport complet: SCHEMA_COMPLETION_REPORT.md"
echo "   - Guide d√©ploiement: DEPLOYMENT-GUIDE.md"
echo ""

echo -e "${BLUE}‚ú® Le sch√©ma PostgreSQL est maintenant op√©rationnel !${NC}"